[{"path":"http://bcgov.github.io/bcaquiferdata/CODE_DESIGN.html","id":null,"dir":"","previous_headings":"","what":"Code Design","title":"Code Design","text":"file contains notes code design conventions aim making collaboration future modifications easier.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/CODE_DESIGN.html","id":"naming","dir":"","previous_headings":"","what":"Naming","title":"Code Design","text":"Snake case used wherever possible Test files named test-XX_DESCRIPTION.R, XX order run (try test lower order functions first).","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/CODE_DESIGN.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Code Design","text":"Descriptions parameter arguments follow: @param arg_name Type. Description e.g., @param lidar_dir Character. File path Lidar tiles stored. e.g., @param region sf simple features object. Shape file region interest. Document repetitive arguments (ones found one function) R/aa_common_docs.R file (named sort top folder), use @inheritParams common_docs function documentation. way duplicate documentation stays consistent. Use @noRd document internal functions (documentation developers isn’t compiled docs)","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/CODE_DESIGN.html","id":"data-sources","dir":"","previous_headings":"","what":"Data sources","title":"Code Design","text":"TRIM DEM https://catalogue.data.gov.bc.ca/dataset/7b4fef7e-7cae-4379-97b8-62b03e9ac83d via bcmaps::cded Lidar DEM https://governmentofbc.maps.arcgis.com/apps/MapSeries/index.html?appid=d06b37979b0c4709b7fcf2a1ed458e03","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, interest fostering open welcoming community, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality. Examples unacceptable behavior participants include: use sexualized language imagery Personal attacks Trolling insulting/derogatory comments Public private harassment Publishing ’s private information, physical electronic addresses, without explicit permission unethical unprofessional conduct Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful. adopting Code Conduct, project maintainers commit fairly consistently applying principles every aspect managing project. Project maintainers follow enforce Code Conduct may permanently removed project team. Code Conduct applies within project spaces public spaces individual representing project community. Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project maintainer jon.goetz@gov.bc.ca. complaints reviewed investigated result response deemed necessary appropriate circumstances. Maintainers obligated maintain confidentiality regard reporter incident. Code Conduct adapted Contributor Covenant, version 1.3.0, available http://contributor-covenant.org/version/1/3/0/ project created using bcgovr package.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/CONTRIBUTING.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute","title":"NA","text":"Government employees, public members private sector encouraged contribute repository forking submitting pull request. (new GitHub, might start basic tutorial check detailed guide pull requests.) Pull requests evaluated repository guardians schedule deemed beneficial committed master. contributors retain original copyright stuff, contributing project, grant world-wide, royalty-free, perpetual, irrevocable, non-exclusive, transferable license users terms license project distributed. project created using bcgovr package.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":null,"dir":"","previous_headings":"","what":"Workflow and Design Plan","title":"Workflow and Design Plan","text":"document compiles ideas implementation discussed around project. describe various steps, list implemented R code/functions well Shiny App (aq_app()). Status outstanding tasks/questions listed item. summary links relevant sections Downloading GWELLS - Complete Standardize Lithology - Polishing Defining area interest - Complete Fetching elevation data - Partially complete Adding elevation data - Complete Adding spatial data layers - implemented Water flow analysis - Partially complete Cross-sections - Partially complete Flagging issues - Partially complete R package development - Incomplete","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"downloading-gwells","dir":"","previous_headings":"","what":"Downloading GWELLS","title":"Workflow and Design Plan","text":"[Code] Functions check GWELLS data cache download needed. User can use data_update() download/update local cache. User can load data directly using data_read() (necessary functions automatically). [App] First tab offers information state data cache options download clear cache Status - Complete","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"standardize-lithology","dir":"","previous_headings":"","what":"Standardize Lithology","title":"Workflow and Design Plan","text":"part GWELLS data download, lithology statements processed simplified categories Spelling mistakes corrected, multiple terms collapsed (lithology_clean) Remaining terms established primary, secondary, tertiary (lith_primary, lith_secondary, lith_tertiary categorized lithology_category Special terms listed lithology_extra (e.g., “wet”) Status - Polishing TODO questions refinement ‘lithology_extra’ column?","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"defining-area-of-interest","dir":"","previous_headings":"","what":"Defining area of interest","title":"Workflow and Design Plan","text":"[Code] User loads shape file via sf package (sf::st_read()) [App] User selects shape files zip shape files Status - Complete","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"fetching-elevation-data","dir":"","previous_headings":"","what":"Fetching elevation data","title":"Workflow and Design Plan","text":"Sources - Lidar - https://catalogue.data.gov.bc.ca/dataset/lidarbc-open-lidar-data-portal - TRIM DEM - https://catalogue.data.gov.bc.ca/dataset/1-20-000-georeferenced-topographic-base-maps--mapsheet - https://catalogue.data.gov.bc.ca/dataset/digital-elevation-model--british-columbia-cded-1-250-000 Steps - Using area interest, download relevant DEM data cache, load , trim area interest. - [Code] User passes area interest dem_region() function - [App] Automatically happens area interest selected Status - Mostly complete TODO Add option user supply spatial elevation data","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"adding-elevation-data","dir":"","previous_headings":"","what":"Adding elevation data","title":"Workflow and Design Plan","text":"Using region interest, subset full GWELLS data wells interest Join spatially elevation data [Code] Subset wells_subset(), add elevation wells_elev() [App] Automatically happens area interest selected Status - Complete","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"adding-spatial-data-layers","dir":"","previous_headings":"","what":"Adding spatial data layers","title":"Workflow and Design Plan","text":"Spatial data trimmed match extent area interst. Bedrock geology: https://catalogue.data.gov.bc.ca/dataset/bedrock-geology Faults: https://catalogue.data.gov.bc.ca/dataset/geology-faults Quaternary Mapping: https://catalogue.data.gov.bc.ca/dataset/geology-quaternary-alluvium--cover Aquifers: https://catalogue.data.gov.bc.ca/dataset/ground-water-aquifers Freshwater Atlas lakes: https://catalogue.data.gov.bc.ca/dataset/freshwater-atlas-lakes Freshwater Atlas wetlands: https://catalogue.data.gov.bc.ca/dataset/freshwater-atlas-wetlands Freshwater Atlas streams: https://catalogue.data.gov.bc.ca/dataset/freshwater-atlas-stream-network Status - implemented TODO necessary desired? , look like App?","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"water-flow-analysis","dir":"","previous_headings":"","what":"Water flow analysis","title":"Workflow and Design Plan","text":"Extract water flow details lithology descriptions Adds four columns: yield, yield units, depth, depth units multiple yields per record, corresponding flow multiple depths, extra records created (currently duplicated) Add flow column flag (?) - ‘fracture’, ‘wet’ term (e.g., ‘flow’, ‘seepage’, etc.), ‘aquifer’, lithology description [implemented] [Code] User formats data water flow analysis using wells_yield() function [App] hydrostratigraphy tab shows data formated water flow analysis. Status - Partially complete TODO next? data exportable app? create multiple records? need adjust record depths? flow column added?","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"cross-sections","dir":"","previous_headings":"","what":"Cross-sections","title":"Workflow and Design Plan","text":"Export data formats useful Cross-section analyses Strater Voxler ArcHydro [Code] Users can export data various formats wells_export() [App] Exports tab previews data different formats option save/download zipped copies files. Status - Partially complete TODO [App] downloaded zip file user able state diretory saved ? Test output files ensure correct exports","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"flagging-issues","dir":"","previous_headings":"","what":"Flagging issues","title":"Workflow and Design Plan","text":"Common problems yield lithology can flagged (flag columns added) [Code] flag_XXX columns added data outputs. flags data set includes glossary explaining flags [App] flag_XXX columns added data outputs. dedicated ‘flags’ tab exploring flags includes copy glossary flags data set. Status - Partially complete TODO Review flag specifics ensure correct Add flags next? Option export flags App? (Note datasets App can exported already, relevant special format required)","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/WORKFLOW AND DESIGN.html","id":"r-package-development","dir":"","previous_headings":"","what":"R package development","title":"Workflow and Design Plan","text":"Adding checks (give users informative feedback use function incorrectly) Adding tests (ensure lithology categorizations consistent, functions work expected) Function documentation pkgdown website Move package repository bcgov GitHub Status - Incomplete TODO !","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Lithology Cleaning and Categorizing","text":"GWELLS data downloaded, raw lithology descriptions cleaned categories lithology categories use programs. results ultimately transforming original starting description GWELLS new lithology category defined set rules. example, original lithology record “gravel sandy seams” categorized “Sand Gravel (Clean)”. However process happens several steps transparency, outputs intermediate steps retained final data set. full example lithology data. article explain data created.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"categorization-steps","dir":"Articles","previous_headings":"","what":"Categorization Steps","title":"Lithology Cleaning and Categorizing","text":"Categorizing lithology happens three steps: Cleaning Initial categorizing Final categorizing lithology data contains columns reflecting steps. lithology_raw_data Original lithology description GWELLS lithology_clean Cleaned lithology description lith_primary, lith_secondary, lith_tertiary Intermediate categories created lithology_clean lithology_extra Extra, potentially important descriptors extracted lithology description lithology_category Final categorized lithology flag_bedrock, flag_boulders, flag_missing_cats Columns flagging particular observation problematic","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"cleaning","dir":"Articles","previous_headings":"Categorization Steps","what":"1. Cleaning","title":"Lithology Cleaning and Categorizing","text":"Remove erroneous text (unnecessary qualifiers) Fix spelling mistakes Consolidate/standardize similar terms example…","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"initial-categorizing","dir":"Articles","previous_headings":"Categorization Steps","what":"2. Initial Categorizing","title":"Lithology Cleaning and Categorizing","text":"Create primary, secondary tertiary categories important terms Primary categories ‘Standalone’ terms, possibly qualified categories e.g., sand, silt, clay, till, boulders, bedrock Secondary categories ‘’ terms e.g., sand, silt, clay, boulders, bedrock, till Tertiary categories Terms ending ‘y’/‘ey’ sandy, silty, clayey, tilly, bouldery","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"final-categorizing","dir":"Articles","previous_headings":"Categorization Steps","what":"3. Final Categorizing","title":"Lithology Cleaning and Categorizing","text":"categories used define single final category, according set rules example… “Categorization” section explains detail final category decided upon.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"flags-and-extra","dir":"Articles","previous_headings":"Categorization Steps","what":"Flags and Extra","title":"Lithology Cleaning and Categorizing","text":"addition creating lithology category, flag specific situations may warrent extra investigation, well pull note terms ‘extra’ column (lithology_extra).","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"categorization-rules","dir":"Articles","previous_headings":"","what":"Categorization Rules","title":"Lithology Cleaning and Categorizing","text":"rules used define final lithology categories, examining primary, secondary, tertiary categories. Note: rules order importance. Therefore combination terms matches one rule, first rule takes presidence.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"weathered-fractured-or-faulted-bedrock","dir":"Articles","previous_headings":"Categorization Rules","what":"Weathered, Fractured or Faulted Bedrock","title":"Lithology Cleaning and Categorizing","text":"category fractured, weathered, faulted","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"bedrock","dir":"Articles","previous_headings":"Categorization Rules","what":"Bedrock","title":"Lithology Cleaning and Categorizing","text":"category bedrock","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"boulders","dir":"Articles","previous_headings":"Categorization Rules","what":"Boulders","title":"Lithology Cleaning and Categorizing","text":"category boulders","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"organics","dir":"Articles","previous_headings":"Categorization Rules","what":"Organics","title":"Lithology Cleaning and Categorizing","text":"Primary organic","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"gravel-sand-clay-or-silt","dir":"Articles","previous_headings":"Categorization Rules","what":"Gravel, Sand, Clay, or Silt","title":"Lithology Cleaning and Categorizing","text":"Primary gravel, sand, clay, siltNo Secondary/Tertiary (Except silty clay clay silt)","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"sandy-or-gravelly-silt","dir":"Articles","previous_headings":"Categorization Rules","what":"Sandy or Gravelly Silt","title":"Lithology Cleaning and Categorizing","text":"Primary siltSecondary/Tertiary sand gravel","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"sand-and-gravel-clean","dir":"Articles","previous_headings":"Categorization Rules","what":"Sand and Gravel (Clean)","title":"Lithology Cleaning and Categorizing","text":"() sand gravel present category","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"sand-and-gravel-dirty","dir":"Articles","previous_headings":"Categorization Rules","what":"Sand and Gravel (Dirty)","title":"Lithology Cleaning and Categorizing","text":"gravel sand present category, least one Primary Secondary/Tertiary also silt clayORPrimary gravel, sand silt/clay","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"sand-and-fines","dir":"Articles","previous_headings":"Categorization Rules","what":"Sand and Fines","title":"Lithology Cleaning and Categorizing","text":"Primary sand Secondary/Tertiary silt clayORPrimary sand silt (clay)","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"gravel-dirty","dir":"Articles","previous_headings":"Categorization Rules","what":"Gravel (Dirty)","title":"Lithology Cleaning and Categorizing","text":"Primary gravel Secondary/Tertiary silt clayORPrimary gravel silt (clay)","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"sand-or-gravel-till-or-diamicton","dir":"Articles","previous_headings":"Categorization Rules","what":"Sand or Gravel Till or Diamicton","title":"Lithology Cleaning and Categorizing","text":"category sgtillORPrimary till clay category sand gravel (primary) ORPrimary sand gravel Secondary/Tertiary tillORPrimary compact category sand gravel","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"medium-to-clay-till-or-diamicton","dir":"Articles","previous_headings":"Categorization Rules","what":"Medium to Clay Till or Diamicton","title":"Lithology Cleaning and Categorizing","text":"Primary till, hardpan hard earthORPrimary silt Secondary/Tertiary tillORPrimary clay category tillORPrimary compact category silt clayORAny combination silt clay already categorized Note: silty clay already categorized “Clay” (see Gravel, Sand, Clay, Silt)","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"shells","dir":"Articles","previous_headings":"Categorization Rules","what":"Shells","title":"Lithology Cleaning and Categorizing","text":"Primary shellsNo Secondary/Tertiary","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"overburden","dir":"Articles","previous_headings":"Categorization Rules","what":"Overburden","title":"Lithology Cleaning and Categorizing","text":"Primary overburdenNo Secondary/Tertiary","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"no-category","dir":"Articles","previous_headings":"Categorization Rules","what":"No category","title":"Lithology Cleaning and Categorizing","text":"categories empty","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/articles/lithology_categorization.html","id":"extra-columns","dir":"Articles","previous_headings":"","what":"Extra columns","title":"Lithology Cleaning and Categorizing","text":"Organics, Boulders, Shells noted column lithology_extra : flow (water, flowing, stream water, etc.) seepage, wet, saturated, trickle waterbearing (water-bearing, wb, w.b. etc.) aquifer, reservoir, artesian","code":""},{"path":[]},{"path":[]},{"path":"http://bcgov.github.io/bcaquiferdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steffi LaZerte. Author, maintainer. Christine Bieber. Author. Province British Columbia. Copyright holder.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"LaZerte S, Bieber C (2024). bcaquiferdata: BC Aquifer data tools. R package version 0.0.3, https://github.com/bcgov/bcaquiferdata, http://bcgov.github.io/bcaquiferdata/.","code":"@Manual{,   title = {bcaquiferdata: BC Aquifer data tools},   author = {Steffi LaZerte and Christine Bieber},   year = {2024},   note = {R package version 0.0.3, https://github.com/bcgov/bcaquiferdata},   url = {http://bcgov.github.io/bcaquiferdata/}, }"},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"bcaquiferdata","dir":"","previous_headings":"","what":"BC Aquifer data tools","title":"BC Aquifer data tools","text":"R package processing BC Gov GWELLS data formats suitable analyses (e.g., Strater, Voxler, ArcHydro). functions provided allow users filter GWELLS data region (shapefile), calculate add elevation data Lidar TRIM, clean categorize GWELLS lithology yield data. Shiny app (graphical user interface), provides tool data exploration exporting. ’re still actively refining adding tool, maturing.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"BC Aquifer data tools","text":"Install R RStudio Install remotes - install.packages(\"remotes\") Install bcaquiferdata - remotes::install_github(\"bcgov/bcaquiferdata\") [Update asked] Launch Shiny App - aq_app()","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"in-detail","dir":"","previous_headings":"","what":"In Detail","title":"BC Aquifer data tools","text":"Update RStudio (’s ) Update R (’s ) Open RStudio Install remotes console type following hit enter Install bcgwcat console type following hit enter (sure install updates prompted!)","code":"install.packages(\"remotes\") remotes::install_github(\"bcgov/bcgwcat\")"},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"troubleshooting","dir":"","previous_headings":"In Detail","what":"Troubleshooting","title":"BC Aquifer data tools","text":"Update packages run errors right start, consider updating packages.","code":"```r remotes::update_packages() ```"},{"path":[]},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"shiny-user-interface","dir":"","previous_headings":"Using bcaquiferdata","what":"Shiny User-Interface","title":"BC Aquifer data tools","text":"Type line R console prompt (screen >) hit ‘Enter’. See tutorial -depth look use User Interface","code":"bcaquiferdata::aq_app() # Launch the app"},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"r-command-line","dir":"","previous_headings":"Using bcaquiferdata > Shiny User-Interface","what":"R command line","title":"BC Aquifer data tools","text":"general workflow ‘hand’ (without using app) run various steps using functions directly. gives bit flexibility explore /filter data. Let’s work couple examples (note presented illustration, shape files included package) Clinton Creek Load shape file defining region interest Fetch Lidar DEM (may take first time) Plot double check  Collect wells region added elevation Lidar Plot double check  Export data Strater, Voxler, ArcHydro Mill Bay Watershed Load shape file defining region interest ’ll check tiles  Fetch Lidar DEM (may take first time) Add plot double check  Looks like don’t elevation data whole region. can confirmed checking online LidarBC map Let’s take look options using TRIM data. Add plot double check  TRIM coarser resolution, covers entire area. Let’s use instead. Collect wells region added elevation TRIM. Plot double check, see now elevation data wells.  Export data Strater, Voxler, ArcHydro","code":"library(bcaquiferdata) library(sf) library(ggplot2) library(ggspatial) creek_sf <- st_read(\"misc/data/Clinton_Creek.shp\") #> Reading layer `Clinton_Creek' from data source  #>   `/home/steffi/Projects/Business/BC Government/bcaquiferdata/misc/data/Clinton_Creek.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 1 feature and 15 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1294896 ymin: 671234.7 xmax: 1315854 ymax: 695645.2 #> Projected CRS: NAD83 / BC Albers creek_lidar <- dem_region(creek_sf) #> Get Lidar data  #> Saving new tiles to cache directory: ~/.local/share/bcaquiferdata  #> Checking for matching tifs  #> Fetching bc_092p002_xli1m_utm10_2019.tif - skipping (new_only = TRUE)  #> Fetching bc_092p013_xli1m_utm10_2019.tif - skipping (new_only = TRUE)  #> Fetching bc_092p012_xli1m_utm10_2019.tif - skipping (new_only = TRUE)  #> Fetching bc_092i092_xli1m_utm10_2019.tif - skipping (new_only = TRUE)  #> Fetching bc_092p003_xli1m_utm10_2019.tif - skipping (new_only = TRUE)  #> Cropping DEM to region plot(creek_lidar) #> downsample set to 39 creek_wells <- creek_sf |>   wells_subset() |>        # Subset to region   wells_elev(creek_lidar)  # Add Lidar #> Subset wells  #> Add elevation ggplot() +   geom_sf(data = creek_sf) +   geom_sf(data = creek_wells, size= 1, aes(colour = elev)) wells_export(creek_wells, id = \"clinton\", type = \"strater\") #> Writing Strater files ./clinton_strater_lith.csv, ./clinton_strater_collars.csv, ./clinton_strater_wls.csv  #> [1] \"./clinton_strater_lith.csv\"    \"./clinton_strater_collars.csv\" #> [3] \"./clinton_strater_wls.csv\" wells_export(creek_wells, id = \"clinton\", type = \"voxler\") #> Writing Voxler file ./clinton_voxler.csv  #> [1] \"./clinton_voxler.csv\" wells_export(creek_wells, id = \"clinton\", type = \"archydro\") #> Writing ArcHydro files ./clinton_archydro_well.csv, ./clinton_archydro_hguid.csv, ./clinton_archydro_bh.csv  #> [1] \"./clinton_archydro_well.csv\"  \"./clinton_archydro_hguid.csv\" #> [3] \"./clinton_archydro_bh.csv\" mill_sf <- st_read(\"misc/data/MillBayWatershed.shp\") #> Reading layer `MillBayWatershed' from data source  #>   `/home/steffi/Projects/Business/BC Government/bcaquiferdata/misc/data/MillBayWatershed.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 1 feature and 16 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1175893 ymin: 402094.9 xmax: 1181462 ymax: 407633.1 #> Projected CRS: NAD83 / BC Albers g <- ggplot() +   annotation_map_tile(type = \"osm\", zoomin = -1) +   geom_sf(data = mill_sf, fill = NA, linewidth = 1.5) +   labs(caption = \"Data from OpenStreet Map\") g mill_lidar <- dem_region(mill_sf) #> Get Lidar data  #> Saving new tiles to cache directory: ~/.local/share/bcaquiferdata  #> Checking for matching tifs  #> Fetching bc_092b063_xl1m_utm10_2019.tif - skipping (new_only = TRUE)  #> Fetching bc_092b062_xl1m_utm10_2019.tif - skipping (new_only = TRUE)  #> Cropping DEM to region mill_lidar_sf <- stars::st_downsample(mill_lidar, n = 12) |> # Downsample first   st_as_sf(as_points = FALSE, merge = TRUE)         # Convert to polygons #> for stars_proxy objects, downsampling only happens for dimensions x and y g + geom_sf(data = mill_lidar_sf, aes(fill = elev), colour = NA) #> Zoom: 13 mill_trim <- dem_region(mill_sf, type = \"trim\") #> Get TRIM data  #> checking your existing tiles for mapsheet 92b are up to date  #> Cropping DEM to region mill_trim_sf <- mill_trim |>   st_as_sf(as_points = FALSE, merge = TRUE)         # Convert to polygons  g + geom_sf(data = mill_trim_sf, aes(fill = elev), colour = NA) #> Zoom: 13 mill_wells <- mill_sf |>   wells_subset() |>   wells_elev(mill_trim) #> Subset wells  #> Add elevation g +   geom_sf(data = mill_wells, size = 1, aes(colour = elev)) +   scale_color_viridis_c(na.value = \"red\") #> Zoom: 13 wells_export(mill_wells, id = \"mill\", type = \"strater\") #> Writing Strater files ./mill_strater_lith.csv, ./mill_strater_collars.csv, ./mill_strater_wls.csv  #> [1] \"./mill_strater_lith.csv\"    \"./mill_strater_collars.csv\" #> [3] \"./mill_strater_wls.csv\" wells_export(mill_wells, id = \"mill\", type = \"voxler\") #> Writing Voxler file ./mill_voxler.csv  #> [1] \"./mill_voxler.csv\" wells_export(mill_wells, id = \"mill\", type = \"archydro\") #> Writing ArcHydro files ./mill_archydro_well.csv, ./mill_archydro_hguid.csv, ./mill_archydro_bh.csv  #> [1] \"./mill_archydro_well.csv\"  \"./mill_archydro_hguid.csv\" #> [3] \"./mill_archydro_bh.csv\""},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"extra-tools","dir":"","previous_headings":"Using bcaquiferdata > Shiny User-Interface","what":"Extra tools","title":"BC Aquifer data tools","text":"Load cleaned data (fetch doesn’t already exist) Explore lithology standardization performed bcaquiferdata Save peruse later","code":"library(dplyr) library(readr) wells_lith <- data_read(\"lithology\") lith_std <- wells_lith |>   select(well_tag_number, contains(\"lith\")) |>   arrange(!is.na(lithology_category)) lith_std #> # A tibble: 618,156 × 17 #>    well_tag_number lithology_from_ft_bgl lithology_to_ft_bgl lithology_raw_data  #>              <dbl>                 <dbl>               <dbl> <chr>               #>  1              11                   164                 187 \"red ash\"           #>  2              13                     1                 120 \"\\\"\"                #>  3              49                     0                  15  <NA>               #>  4              62                     0                   0 \"backfilled to 217… #>  5              73                    25                 170 \"delimite w/copper… #>  6              73                   190                 380 \"copper ore w/deli… #>  7              88                     0                  65  <NA>               #>  8              98                     0                  15  <NA>               #>  9             105                     0                  15  <NA>               #> 10             163                   200                 210 \"gray,clean a litt… #> # ℹ 618,146 more rows #> # ℹ 13 more variables: lithology_description_code <chr>, #> #   lithology_material_code <chr>, lithology_hardness_code <chr>, #> #   lithology_colour_code <chr>, lithology_observation <chr>, #> #   lithology_from_m <dbl>, lithology_to_m <dbl>, lithology_clean <chr>, #> #   lith_primary <chr>, lith_secondary <chr>, lith_tertiary <chr>, #> #   lithology_extra <chr>, lithology_category <chr> write_csv(lith_std, \"lith_categorization.csv\")"},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"vignettetutorials","dir":"","previous_headings":"","what":"Vignette/Tutorials","title":"BC Aquifer data tools","text":"See bcaquiferdata website","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"BC Aquifer data tools","text":"Copyright 2024 Province British Columbia Licensed Apache License, Version 2.0 (“License”); may use file except compliance License. may obtain copy License http://www.apache.org/licenses/LICENSE-2.0 Unless required applicable law agreed writing, software distributed License distributed “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied. See License specific language governing permissions limitations License.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/aq_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch Aquifer Data Shiny App — aq_app","title":"Launch Aquifer Data Shiny App — aq_app","text":"app allows load shapefile filter aquifer/well data according region, explore data, export cleaned files.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/aq_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch Aquifer Data Shiny App — aq_app","text":"","code":"aq_app()"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/aq_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch Aquifer Data Shiny App — aq_app","text":"","code":"if (FALSE) { # interactive() aq_app() }"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/cache_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean cache — cache_clean","title":"Clean cache — cache_clean","text":"Removes data cache","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/cache_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean cache — cache_clean","text":"","code":"cache_clean(bcmaps_cded = FALSE)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/cache_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean cache — cache_clean","text":"bcmaps Logical. Whether also remove CDED files cached bcmaps package. used bcaquifertools acquiring TRIM data, may also cached use workflows.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/cache_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean cache — cache_clean","text":"","code":"# cache_clean() # cache_clean(bcmaps_cded = TRUE)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/common_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Common arguments and documentation for various functions — common_docs","title":"Common arguments and documentation for various functions — common_docs","text":"Common arguments documentation various functions","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/common_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common arguments and documentation for various functions — common_docs","text":"region sf simple features object. Shape file region interest. update Logical. Force update data? wells_sub sf spatial data frame. Subset wells data output wells_subset() permission Logical. Permission create cache folder. FALSE, user asked permission, TRUE, permission implied.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/common_docs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Common arguments and documentation for various functions — common_docs","text":"Use @inheritParams common_docs include function documentation matching argument (include matching args)","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Download, Update, and/or load data — data_read","title":"Download, Update, and/or load data — data_read","text":"function downloads, updates loads locally stored data. Currently function returns wells, wells_sf, lithology data. Note data originally GWELLS, cleaned summarized use bcaquiferdata package. example wells_sf spatial version data, lithology cleaned standardized version lithology. wells also contains new standardized lithology data, along original lithology observations intermediate classification steps simplify error tracing.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download, Update, and/or load data — data_read","text":"","code":"data_read(type, update = FALSE, permission = FALSE)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download, Update, and/or load data — data_read","text":"type Character. Type data return, one wells, wells_sf, lithology update Logical. Force update data? permission Logical. Permission create cache folder. FALSE, user asked permission, TRUE, permission implied.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download, Update, and/or load data — data_read","text":"Data frame spatial features object requested data.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download, Update, and/or load data — data_read","text":"normal circumstances, users need use function used internally main workflow functions. However, users may wish overview entire datasets. Bear mind lithology cleaning standardizing, better original data, almost certainly still errors!","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download, Update, and/or load data — data_read","text":"","code":"if (FALSE) { # interactive() wells <- data_read(\"wells\") }"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update cached data — data_update","title":"Update cached data — data_update","text":"Update GWELLs data stored locally.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update cached data — data_update","text":"","code":"data_update(type = \"all\", download = TRUE, permission = FALSE)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update cached data — data_update","text":"type Character. Type data update. One \"\", \"wells\", \"lithology\" download Logical. Whether re-download process data (TRUE), just re-process (FALSE). permission Logical. Permission create cache folder. FALSE, user asked permission, TRUE, permission implied.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/data_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update cached data — data_update","text":"","code":"if (FALSE) { # interactive()  data_update(type = \"lithology\") }"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/dem_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and trim DEM of a region — dem_region","title":"Fetch and trim DEM of a region — dem_region","text":"function takes shape file region creates DEM region. Lidar data stored locally tiles. Tiles downloaded already exist unless only_new = FALSE. TRIM data obtained via bcmaps package stored locally tiles. Note: TRIM elevation coarser Lidar Use Lidar unless missing region interest.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/dem_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and trim DEM of a region — dem_region","text":"","code":"dem_region(   region,   type = \"lidar\",   buffer = 1,   lidar_dir = NULL,   only_new = TRUE,   progress = httr::progress() )"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/dem_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and trim DEM of a region — dem_region","text":"region sf simple features object. Shape file region interest. type Character. Type DEM download, either \"lidar\" \"trim\". Use Lidar unless unavailable. buffer Numeric. Percent buffer apply region spatial file cropping DEM data match. Increase value find wells edge area matched elevations using wells_elev(). lidar_dir Character. File path Lidar tiles stored. Defaults cache directory. applies type = \"lidar\". only_new Logical. Whether download Lidar tiles, new tiles exist locally. Defaults TRUE. apples type = \"lidar\". progress Function. Progress bar use. Generally leave .","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/dem_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch and trim DEM of a region — dem_region","text":"stars spatiotemporal array object","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/dem_region.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch and trim DEM of a region — dem_region","text":"Lidar tiles newest tile available. reason need historical file, contact team discuss use case.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/dem_region.html","id":"data-source","dir":"Reference","previous_headings":"","what":"Data Source","title":"Fetch and trim DEM of a region — dem_region","text":"Lidar data obtained LidarBC portal. tiles data frame contains internally created data frame listing tiles respective download locations. Tiles download selected based overlap map tiles provided shapefile (region). Lidar tiles can browsed downloaded manually via LidarBC Open LiDAR Data Portal grid map tiles obtained BC Data Catalogue, BCGS 1:20,000 Grid TRIM data obtained via bcmaps package BC government Data Catalogue based overlap map tiles provided shapefile (region).","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/dem_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch and trim DEM of a region — dem_region","text":"","code":"if (FALSE) { # interactive()  library(sf)  # Load a shape file defining the region of interest creek_sf <- st_read(\"misc/data/Clinton_Creek.shp\")  # Fetch Lidar DEM creek_lidar <- dem_region(creek_sf)  plot(creek_lidar)  # Fetch TRIM DEM creek_trim <- dem_region(creek_sf, type = \"trim\")  plot(creek_trim)  }"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/flags.html","id":null,"dir":"Reference","previous_headings":"","what":"Flags — flags","title":"Flags — flags","text":"glossary flag terms","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flags — flags","text":"","code":"flags"},{"path":[]},{"path":"http://bcgov.github.io/bcaquiferdata/reference/flags.html","id":"flags","dir":"Reference","previous_headings":"","what":"flags","title":"Flags — flags","text":"data frame 10 rows 2 columns: Flag flag name Description Flag description","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/lith_fix.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix lithology descriptions — lith_fix","title":"Fix lithology descriptions — lith_fix","text":"Clean categorize lithology descriptions primary, secondary, tertiary final lithology categories. Generally function used internally loading cleaning GWELLS lithology.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/lith_fix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix lithology descriptions — lith_fix","text":"","code":"lith_fix(file = \"lithology.csv\", desc = NULL)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/lith_fix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix lithology descriptions — lith_fix","text":"file Character. Lithology file name stored cache desc Character. Text string convert (overrides file).","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/lith_fix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix lithology descriptions — lith_fix","text":"Data frame lithology categorizations","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/lith_fix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fix lithology descriptions — lith_fix","text":"However statements can tested directly function see works troubleshooting.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/lith_fix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix lithology descriptions — lith_fix","text":"","code":"lith_fix(desc = \"sandy gravel\") #>   lithology_raw_data lithology_clean lith_primary lith_secondary lith_tertiary #> 1       sandy gravel    sandy gravel       gravel                         sand #>   lithology_extra      lithology_category yield_units flag_bedrock #> 1                 Sand and Gravel (Clean)                    FALSE #>   flag_boulders flag_missing_cats #> 1         FALSE             FALSE  # basic spell checks lith_fix(desc = \"saandy gravel\") #>   lithology_raw_data lithology_clean lith_primary lith_secondary lith_tertiary #> 1      saandy gravel    sandy gravel       gravel                         sand #>   lithology_extra      lithology_category yield_units flag_bedrock #> 1                 Sand and Gravel (Clean)                    FALSE #>   flag_boulders flag_missing_cats #> 1         FALSE             FALSE"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"tiles — tiles","title":"tiles — tiles","text":"spatial data frame map tiles corresponding links Lidar tiles.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tiles — tiles","text":"","code":"tiles"},{"path":[]},{"path":"http://bcgov.github.io/bcaquiferdata/reference/tiles.html","id":"tiles","dir":"Reference","previous_headings":"","what":"tiles","title":"tiles — tiles","text":"data frame 7,129 rows 5 columns: map_tile Tile name geometry Spatial data utm Projection tile_name Lidar tile name url Link Lidar tile","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/tiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tiles — tiles","text":"spatial grid map tiles obtained BC Data Catalogue, BCGS 1:20,000 Grid Links Lidar tile urls extracted list LidarBC Open LiDAR Data Portal","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_elev.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset wells and add elevation — wells_elev","title":"Subset wells and add elevation — wells_elev","text":"function takes region shape file DEM region (output dem_region()), subsets wells data (GWELLS) region adds elevation data.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_elev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset wells and add elevation — wells_elev","text":"","code":"wells_elev(wells_sub, dem, update = FALSE)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_elev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset wells and add elevation — wells_elev","text":"wells_sub sf spatial data frame. Subset wells data output wells_subset() dem stars simple features object. Output dem_region(). update Logical. Force update data?","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_elev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset wells and add elevation — wells_elev","text":"sf spatial data frame","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_elev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset wells and add elevation — wells_elev","text":"","code":"if (FALSE) { # interactive()  library(sf) library(ggplot2)  # Load a shape file defining the region of interest creek_sf <- st_read(\"misc/data/Clinton_Creek.shp\")  # Get wells within this region creek_wells <- wells_subset(creek_sf)  # Fetch Lidar DEM creek_lidar <- dem_region(creek_sf)  # Collect wells in this region with added elevation from Lidar creek_wells <- wells_elev(creek_wells, creek_lidar)  ggplot() +   geom_sf(data = creek_sf) +   geom_sf(data = creek_wells, aes(colour = elev), size = 0.5,           fill = \"NA\", show.legend = FALSE) +  coord_sf(datum = st_crs(3005)) # BC Albers  # OR Fetch TRIM DEM creek_trim <- dem_region(creek_sf, type = \"trim\")  # Collect wells in this region with added elevation from Lidar creek_wells <- wells_elev(creek_wells, creek_trim)  ggplot() +   geom_sf(data = creek_sf) +   geom_sf(data = creek_wells, aes(colour = elev), size = 0.5,           fill = \"NA\", show.legend = FALSE) +  coord_sf(datum = st_crs(3005)) # BC Albers }"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export wells data for use in Strater and Voxler — wells_export","title":"Export wells data for use in Strater and Voxler — wells_export","text":"Export wells data use Strater Voxler","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export wells data for use in Strater and Voxler — wells_export","text":"","code":"wells_export(wells_sub, id, type, dir = \".\", preview = FALSE)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export wells data for use in Strater and Voxler — wells_export","text":"wells_sub Data frame. Output wells_elev() id Character. Id prepend output files e.g., \"id_lith.csv\" type Character. Format export. One \"strater\", \"voxler\", \"archydro\", \"leapfrog\", \"surfer\" (case-insensitive). dir Character. Directory files exported . Defaults working directory. preview Logical. Whether preview exports (TRUE, return list data frames) actually export data (FALSE, write necessary files dir folder.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export wells data for use in Strater and Voxler — wells_export","text":"preview = FALSE, vector file names, preview = TRUE, list data frames.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export wells data for use in Strater and Voxler — wells_export","text":"","code":"if (FALSE) { # interactive()  library(sf)  # Load a shape file defining the region of interest creek <- st_read(\"misc/data/Clinton_Creek.shp\")  # Get wells within this region creek_wells <- wells_subset(creek)  # Fetch Lidar DEM creek_lidar <- dem_region(creek)  # Collect wells in this region with added elevation from Lidar creek_wells <- wells_elev(creek_wells, creek_lidar)  # Preview data for Strater p <- wells_export(creek_wells, id = \"clinton\", type = \"strater\", preview = TRUE) names(p) p[[\"strater_lith\"]] p[[\"strater_collars\"]] p[[\"strater_wells\"]]  # Export data for Strater wells_export(creek_wells, id = \"clinton\", type = \"strater\")  # Export Arc Hydro wells_export(creek_wells, id = \"clinton\", type = \"archydro\")  # Export Surver wells_export(creek_wells, id = \"clinton\", type = \"surfer\") }"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset wells to region — wells_subset","title":"Subset wells to region — wells_subset","text":"Filter GWELLS data returning wells within provided shapefile.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset wells to region — wells_subset","text":"","code":"wells_subset(region, update = FALSE)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset wells to region — wells_subset","text":"region sf simple features object. Shape file region interest. update Logical. Force update data?","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset wells to region — wells_subset","text":"","code":"if (FALSE) { # interactive()  library(sf)  # Load a shape file defining the region of interest creek_sf <- st_read(\"misc/data/Clinton_Creek.shp\")  # Get wells within this region creek_wells <- wells_subset(creek_sf) }"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_yield.html","id":null,"dir":"Reference","previous_headings":"","what":"Add yield lithology data to wells subset — wells_yield","title":"Add yield lithology data to wells subset — wells_yield","text":"Yield records extracted lithology observations added wells data.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_yield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add yield lithology data to wells subset — wells_yield","text":"","code":"wells_yield(wells_sub)"},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_yield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add yield lithology data to wells subset — wells_yield","text":"wells_sub sf spatial data frame. Subset wells data output wells_subset()","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_yield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add yield lithology data to wells subset — wells_yield","text":"Data frame sf spatial data frame wells data added yield lithology.","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/reference/wells_yield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add yield lithology data to wells subset — wells_yield","text":"","code":"if (FALSE) { # interactive()  library(sf)  # Load a shape file defining the region of interest creek_sf <- st_read(\"misc/data/Clinton_Creek.shp\")  # Get wells within this region creek_wells <- wells_subset(creek_sf)  # Get yield data for these wells creek_yield <- wells_yield(creek_wells) }"},{"path":"http://bcgov.github.io/bcaquiferdata/news/index.html","id":"version-003","dir":"Changelog","previous_headings":"","what":"Version 0.0.3","title":"Version 0.0.3","text":"Fix ArcHydro exports Fix tiles erroring missing areas Flag mismatches yield depth extractions Update internal data Allow removal bcmaps/cded cache well bcaquiferdata cache Update Shiny app cache handling","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/news/index.html","id":"version-0019000","dir":"Changelog","previous_headings":"","what":"Version 0.0.1.9000","title":"Version 0.0.1.9000","text":"Fix package dependencies Clarify error messages tiles loading shapefiles Round elevation well depths Switch bslib better displays Add Info tabs better explain lithology hydrostratigraphy Clean lithology Clean hydrostratigraphy Tweak lithology Tweak flags Add leapfrog surfer exports Compile Lidar tiles hand complete quicker searching","code":""},{"path":"http://bcgov.github.io/bcaquiferdata/news/index.html","id":"version-0009000","dir":"Changelog","previous_headings":"","what":"Version 0.0.0.9000","title":"Version 0.0.0.9000","text":"Initial app","code":""}]
